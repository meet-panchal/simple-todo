{"version":3,"sources":["form/AddForm.jsx","form/EditForm.jsx","table/TaskTable.jsx","App.jsx","serviceWorker.js","index.js"],"names":["AddForm","state","todoArray","id","title","description","changeHandler","event","setState","target","name","value","resetHandler","onSubmit","preventDefault","props","addUser","className","type","placeholder","onChange","this","autoComplete","onClick","Component","EditForm","editdata","editChangeHandler","prevProps","updateUser","cancelHandler","TaskTable","scope","data","length","map","task","index","key","deleteUser","editUser","colSpan","uuidv4","require","App","isEditing","currentUser","user","deleteHandler","filter","editHandler","console","log","taskInfo","tasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8a04f27.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./addform.css\"\n\nexport default class AddForm extends Component {\n  state = {\n    todoArray : {\n      id: null,\n      title : '',\n      description : ''\n    }\n  }\n  changeHandler = (event) => {\n    this.setState({\n      todoArray : {...this.state.todoArray, [event.target.name]: event.target.value}\n    })\n  }\n\n  resetHandler = () =>{\n    this.setState({todoArray : {\n      id: null,\n      title : '',\n      description : ''\n    }})\n  }\n  render() {\n    return (\n      <div>\n      <h2>Add Task</h2>\n      <form\n      onSubmit={event => {\n        event.preventDefault()\n        if (!this.state.todoArray.title || !this.state.todoArray.description) return\n        this.props.addUser(this.state.todoArray)\n        this.setState({todoArray : {\n          id: null,\n          title : '',\n          description : ''\n        }})\n      }}\n      >\n        <div className=\"form-group mt-4\">\n          <label>Task Title</label>\n\n          <input \n            type=\"text\" \n            className=\"form-control\" \n            name = \"title\" \n            placeholder=\"Enter task title\" \n            onChange = {this.changeHandler} \n            value={this.state.todoArray.title} \n            autoComplete=\"off\" \n          />\n\n        </div>\n        <div className=\"form-group mt-4\">\n          <label>Task Description</label>\n\n          <input \n            type=\"text\" \n            className=\"form-control\" \n            name = \"description\" \n            placeholder=\"Enter task description\"  \n            onChange = {this.changeHandler} \n            value={this.state.todoArray.description} \n            autoComplete=\"off\"\n          />\n\n        </div>\n        <button className=\"btn btn-success\">Add Task</button>\n        <button className=\"btn btn-info ml-3\" onClick={this.resetHandler}>Reset</button>\n      </form>\n      </div>\n    );\n  }\n}","import React, { Component } from \"react\";\n\nexport default class EditForm extends Component {\n  state = {\n    todoArray : this.props.editdata\n  }\n  editChangeHandler = (event)=>{\n    const {name,value} = event.target\n    this.setState({\n      todoArray : {...this.state.todoArray,[name]:value}\n    })\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.editdata !== this.props.editdata) {\n      this.setState({\n        todoArray : this.props.editdata\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h2>Edit Task</h2>\n      <form\n      onSubmit={event => {\n        event.preventDefault()\n        this.props.updateUser(this.state.todoArray.id,this.state.todoArray)\n      }}\n      >\n        <div className=\"form-group mt-4\">\n          <label>Task Title</label>\n          <input \n          type=\"text\"\n          name = \"title\" \n          className=\"form-control\" \n          placeholder=\"Enter task title\" \n          value={this.state.todoArray.title}\n          onChange={this.editChangeHandler}  />\n        </div>\n        <div className=\"form-group mt-4\">\n          <label>Task Description</label>\n          <input \n          type=\"text\"\n          name = \"description\"\n          className=\"form-control\" \n          placeholder=\"Enter task description\" \n          value={this.state.todoArray.description} \n          onChange={this.editChangeHandler} />\n        </div>\n        <button className=\"btn btn-success\">Update</button>\n        <button className=\"btn btn-info ml-3\" onClick={this.props.cancelHandler}>Cancel</button>\n      </form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class TaskTable extends Component {\n  render() {\n    return (\n      <table className=\"table mt-4\">\n        <thead>\n          <tr>\n            <th scope=\"col\">S.No</th>\n            <th scope=\"col\">Task Title</th>\n            <th scope=\"col\">Task Desc.</th>\n            <th scope=\"col\">Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.data.length > 0 ? (\n            this.props.data.map((task,index) => {\n              return (\n                <tr key={task.id}>\n                  <th scope=\"row\">{index+1}</th>\n                  <td>{task.title}</td>\n                  <td>{task.description}</td>\n                  <td>\n                    <button className=\"btn btn-danger ml-3\" onClick={()=>this.props.deleteUser(task.id)}>Delete</button>\n                    <button className=\"btn btn-warning ml-3\" onClick={()=>this.props.editUser(task)}>Edit</button>\n                  </td>\n                </tr>\n              );\n            })\n          ) : (\n            <tr>\n              <td colSpan={4}>No Task</td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AddForm from \"./form/AddForm\";\nimport EditForm from \"./form/EditForm\";\nimport TaskTable from \"./table/TaskTable\";\nconst uuidv4 = require(\"uuid/v4\");\n\nclass App extends Component {\n  state = {\n    todoArray: [],\n    isEditing: false,\n    currentUser: []\n  };\n\n  addUser = user => {\n    user.id = uuidv4();\n    this.setState({\n      todoArray: [...this.state.todoArray, user]\n    });\n  };\n\n  deleteHandler = id => {\n    this.setState({\n      todoArray: this.state.todoArray.filter(task => task.id !== id),\n      isEditing: false\n    });\n  };\n\n  editHandler = task => {\n    console.log(task);\n    this.setState({\n      isEditing: true,\n      currentUser: {\n        id: task.id,\n        title: task.title,\n        description: task.description\n      }\n    });\n  };\n\n  cancelHandler = () => {\n    this.setState({\n      isEditing: false\n    });\n  };\n\n  updateUser = (id, taskInfo) => [\n    this.setState({\n      isEditing: false,\n      todoArray: this.state.todoArray.map(tasks =>\n        tasks.id === id ? taskInfo : tasks\n      )\n    })\n  ];\n\n  render() {\n    return (\n      <div className=\"container\">\n        <h1>CRUD Operations in React</h1>\n        <div className=\"d-flex justify-content-between mt-4\">\n          <div>\n            {this.state.isEditing ? (\n              <EditForm\n                editdata={this.state.currentUser}\n                cancelHandler={this.cancelHandler}\n                updateUser={this.updateUser}\n              />\n            ) : (\n              <AddForm addUser={this.addUser} />\n            )}\n          </div>\n          <div>\n            <h2>View Task</h2>\n            <TaskTable\n              data={this.state.todoArray}\n              deleteUser={this.deleteHandler}\n              editUser={this.editHandler}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}